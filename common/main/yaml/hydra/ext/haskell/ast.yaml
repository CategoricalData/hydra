# Note: this model is loosely based on Language.Haskell.Tools.AST.
#       References to corresponding symbols from that package can be found in comments.

definitions:

  - name: Alternative # UAlt
    type:
      record:
        - name: pattern
          type: Pattern

        - name: rhs
          type: CaseRhs

        - name: binds
          type:
            optional: LocalBindings

  - name: Assertion # UAssertion (UClassAssert)
    # omitted for now: implicit and infix assertions
    type:
      record:
        - name: name
          type: Name

        - name: types
          type:
            list: Type

  - name: CaseRhs # UCaseRhs'
    # omitted for now: guarded
    type: Expression

  - name: Constructor # UConDecl
    type:
      union:
        # omitted for now: ordinary (positional), infix
        - name: record
          type: Constructor.Record

    innerTypes:
      - name: Record
        type:
          record:
            # omitted for now: args, context

            - name: name
              type: Name

            - name: fields
              type:
                list: Field

  - name: DataDeclaration # UDataDecl
    type:
      record:
        - name: keyword
          type: DataDeclaration.Keyword

        - name: context
          type:
            list: Assertion

        - name: head
          type: DeclarationHead

        - name: constructors
          type:
            list: Constructor

        - name: deriving
          type:
            list: Deriving

    innerTypes:
      - name: Keyword
        type:
          enum:
            - data
            - newtype

  - name: DeclarationWithComments
    type:
      record:
        - name: body
          type: Declaration

        - name: comments
          type:
            optional: string

  - name: Declaration # UDecl
    type:
      union:
        # omitted for now: typeFamily, closedTypeFamily, gDataDecl, typeInst, dataInst, gDataInst, class, inst,
        #                  patternSynonym, deriv, fixity, default, patTypeSig, foreignImport, foreignExport, pragma,
        #                  role, splice

        - name: data
          type: DataDeclaration

        - name: type
          type: TypeDeclaration

        - name: typeSignature
          type: TypeSignature

        - name: valueBinding
          type: ValueBinding

  - name: DeclarationHead # UDeclHead
    type:
      union:
        # omitted for now: infix application

        - name: application
          type: DeclarationHead.Application

        - name: parens
          type: DeclarationHead

        - name: simple
          type: Name

    innerTypes:
      - name: Application
        type:
          record:
            - name: function
              type: DeclarationHead

            - name: operand
              type: TypeVariable

  - name: Deriving # UDeriving
    type:
      # omitted for now: infix, parenthesized, and application instance heads
      list: Name

  - name: Export # UExportSpec
    type:
      union:
        - name: declaration
          type: ImportExportSpec

        - name: module
          type: ModuleName

  - name: Expression # UExpr
    type:
      union:
        # omitted for now: multi-if, unboxed tuple, tuple section, unboxed tuple section, parallel array,
        #                  enum, parallel array enum, list comp, parallel array comp, type application,
        #                  (all Template Haskell constructors), pragma, arrow definition, arrow application,
        #                  lambda cases, static, unboxed sum, hole

        - name: application
          type: Expression.Application

#        - name: arrowDefinition
#          type: Expression.ArrowDefinition

        - name: case
          type: Expression.Case

        - name: constructRecord
          type: Expression.ConstructRecord

        - name: do
          # omitted for now: do vs. mdo
          type:
            list: Statement

        - name: if
          type: Expression.If

        - name: infixApplication
          type: Expression.InfixApplication

        - name: literal
          type: Literal

        - name: lambda
          type: Expression.Lambda

        - name: leftSection
          type: Expression.Section

        - name: let
          type: Expression.Let

        - name: list
          type:
            list: Expression

        - name: parens
          type: Expression

        - name: prefixApplication
          type: Expression.PrefixApplication

        - name: rightSection
          type: Expression.Section

        - name: tuple
          type:
            list: Expression

        - name: typeSignature
          type: Expression.TypeSignature

        - name: updateRecord
          type: Expression.UpdateRecord

        - name: variable
          type: Name

    innerTypes:
      - name: Application
        type:
          record:
            - name: function
              type: Expression

            - name: argument
              type: Expression

#      - name: ArrowDefinition
#        type:
#          record:
#            - name: pattern
#              type: Pattern
#
#            - name: expression
#              type: Command

      - name: Case
        type:
          record:
            - name: case
              type: Expression

            - name: alternatives
              type:
                list: Alternative

      - name: ConstructRecord
        type:
          record:
            - name: name
              type: Name

            - name: fields
              type:
                list: FieldUpdate

      - name: If
        type:
          record:
            - name: condition
              type: Expression

            - name: then
              type: Expression

            - name: else
              type: Expression

      - name: InfixApplication
        type:
          record:
            - name: lhs
              type: Expression

            - name: operator
              type: Operator

            - name: rhs
              type: Expression

      - name: Lambda
        type:
          record:
            - name: bindings
              type:
                list: Pattern

            - name: inner
              type: Expression

      - name: Let
        type:
          record:
            - name: bindings
              type:
                list: Pattern

            - name: inner
              type: Expression

      - name: PrefixApplication
        type:
          record:
            - name: operator
              type: Operator

            - name: rhs
              type: Expression

      - name: Section
        type:
          record:
            - name: operator
              type: Operator

            - name: expression
              type: Expression

      - name: TypeSignature
        type:
          record:
            - name: inner
              type: Expression

            - name: type
              type: Type

      - name: UpdateRecord
        type:
          record:
            - name: inner
              type: Expression

            - name: fields
              type:
                list: FieldUpdate

  - name: Field # UFieldDecl
    type:
      record:
        - name: name
          type: Name

        - name: type
          type: Type

  - name: FieldUpdate # UFieldUpdate
    # omitted for now: pun, wildcard
    type:
      record:
        - name: name
          type: Name

        - name: value
          type: Expression

  - name: Import # UImportDecl
    type:
      record:
        # omitted for now: source, safe, pkg

        - name: qualified
          type: boolean

        - name: module
          type: ModuleName

        - name: as
          type:
            optional: ModuleName

        - name: spec
          type:
            optional: Import.Spec

    innerTypes:
      - name: Spec
        type:
          union:
            - name: list
              type:
                list: ImportExportSpec

            - name: hiding
              type:
                list: ImportExportSpec

  - name: ImportModifier # UImportModifier
    type:
      enum:
        - pattern
        - type

  - name: ImportExportSpec # UIESpec
    type:
      record:
        - name: modifier
          type:
            optional: ImportModifier

        - name: name
          type: Name

        - name: subspec
          type:
            optional: ImportExportSpec.SubSpec

    innerTypes:
      - name: SubSpec
        type:
          union:
            - name: all

            - name: list
              type:
                list: Name

  - name: Literal # ULiteral
    type:
      union:
        # omitted for now: frac, primChar

        - name: char
          type:
            integer:
              precision:
                bits: 16
              signed: false

        - name: double
          type:
            float:
              precision:
                bits: 64

        - name: float
          type: float

        - name: int
          type: integer

        - name: integer
          type:
            integer:
              precision: arbitrary

        - name: string
          type: string

  - name: LocalBinding # ULocalBind
    type:
      union:
        # omitted for now: fixity, pragma

        - name: signature
          type: TypeSignature

        - name: value
          type: ValueBinding

  - name: LocalBindings # ULocalBinds
    type:
      list: LocalBinding

  - name: Module # UModule
    type:
      record:
        # omitted for now: pragma

        - name: head
          type:
            optional: ModuleHead

        - name: imports
          type:
            list: Import

        - name: declarations
          type:
            list: DeclarationWithComments

  - name: ModuleHead # UModuleHead
    type:
      record:
        # omitted for now: pragma

        - name: name
          type: ModuleName

        - name: exports
          type:
            list: Export # UExportSpecs

  - name: ModuleName # UModuleName
    type: string

  - name: Name # UName
    type:
      union:
        - name: implicit
          type: QualifiedName

        - name: normal
          type: QualifiedName

        - name: parens
          type: QualifiedName

  - name: NamePart # UNamePart
    type: string

  - name: Operator # UOperator
    type:
      union:
        - name: backtick
          type: QualifiedName

        - name: normal
          type: QualifiedName

  - name: Pattern # UPattern
    type:
      union:
        # omitted for now: unboxed tuples, parallel arrays, irrefutable, bang, view, splice, quasiquote, plusk, unboxed sum

        - name: application
          type: Pattern.Application

        - name: as
          type: Pattern.As

        - name: list
          type:
            list: Pattern

        - name: literal
          type: Literal

        - name: name
          type: Name

        - name: parens
          type: Pattern

        - name: record
          type: Pattern.Record

        - name: tuple
          type:
            list: Pattern

        - name: typed
          type: Pattern.Typed

        - name: wildcard

    innerTypes:
      - name: Application
        type:
          record:
            - name: name
              type: Name

            - name: args
              type:
                list: Pattern

      - name: As
        type:
          record:
            - name: name
              type: Name

            - name: inner
              type: Pattern

      - name: Record
        type:
          record:
            - name: name
              type: Name

            - name: fields
              type:
                list: PatternField

      - name: Typed
        type:
          record:
            - name: inner
              type: Pattern

            - name: type
              type: Type

  - name: PatternField # UPatternField
    # omitted for now: puns, wildcards
    type:
      record:
        - name: name
          type: Name

        - name: pattern
          type: Pattern

  - name: QualifiedName # UQualifiedName
    type:
      record:
        - name: qualifiers
          type:
            list: NamePart

        - name: unqualified
          type: NamePart

  - name: RightHandSide # URhs
    # omitted for now: guarded rhs
    type: Expression

  - name: Statement # UStmt
    type: Expression

  - name: Type # UType
    type:
      union:
        # omitted for now: forall, ctx, unboxed tuple, parallel array, kinded, promoted, splice, quasiquote, bang,
        #                  lazy, unpack, nounpack, wildcard, named wildcard, sum

        - name: application
          type: Type.Application

        - name: function
          type: Type.Function

        - name: infix
          type: Type.Infix

        - name: list
          type: Type

        - name: parens
          type: Type

        - name: tuple
          type:
            list: Type

        - name: variable
          type: Name

    innerTypes:
      - name: Application
        type:
          record:
            - name: context
              type: Type

            - name: argument
              type: Type

      - name: Function
        type:
          record:
            - name: domain
              type: Type

            - name: codomain
              type: Type

      - name: Infix
        type:
          record:
            - name: lhs
              type: Type

            - name: operator
              type: Operator

            - name: rhs
              type: Operator

  - name: TypeDeclaration # UTypeDecl
    type:
      record:
        - name: head
          type: DeclarationHead

        - name: type
          type: Type

  - name: TypeSignature # UTypeSignature
    type:
      record:
        - name: name
          type: Name

        - name: type
          type: Type

  - name: TypeVariable
    type: Name
    # omitted for now: kind constraints

  - name: ValueBinding # UValueBind
    type:
      union:
        # omitted for now: funBind

        - name: simple
          type: ValueBinding.Simple

    innerTypes:
      - name: Simple
        type:
          record:
            - name: pattern
              type: Pattern

            - name: rhs
              type: RightHandSide

            - name: localBindings
              type:
                optional: LocalBindings
