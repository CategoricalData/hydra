description: "The Hydra Core model"

definitions:

  - name: Application
    description: "A term which applies a function to an argument"
    type:
      record:
        - name: function
          description: "The left-hand side of the application"
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: argument
          description: "The right-hand side of the application"
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: Binop # TODO: temporary; remove me after the type inferencer is fully integrated
    type:
      enum:
        - add
        - sub
        - mul
        - eql

  - name: BooleanValue
    type:
      enum:
        - name: "false"
        - name: "true"

  - name: Comparison
    description: "An equality judgement: less than, equal to, or greater than"
    type:
      enum:
        - lessThan
        - equalTo
        - greaterThan

  - name: Expression
    type:
      union:
        - name: application
          description: "A function application"
          type:
            parameterized:
              genericType: Application
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: element
          description: "An element reference"
          type: Name

        - name: fix # TODO: temporary; remove me after the type inferencer is fully integrated
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: function
          description: "A function term"
          type:
            parameterized:
              genericType: Function
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: if # TODO: temporary; remove me after the type inferencer is fully integrated
          type:
            parameterized:
              genericType: If
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: let
          type:
            parameterized:
              genericType: Let
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: list
          description: "A list"
          type:
            list:
              parameterized:
                genericType: Term
                parameters:
                  - variable: a
                    type:
                      variable: a

        # TODO: list elimination

        - name: literal
          description: "A literal value"
          type: Literal

        - name: map
          description: "A map of key terms to value terms"
          type:
            map:
              keys:
                parameterized:
                  genericType: Term
                  parameters:
                    - variable: a
                      type:
                        variable: a
              values:
                parameterized:
                  genericType: Term
                  parameters:
                    - variable: a
                      type:
                        variable: a

        - name: op # TODO: temporary; remove me after the type inferencer is fully integrated
          type:
            parameterized:
              genericType: Op
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: optional
          description: "An optional value"
          type:
            optional:
              parameterized:
                genericType: Term
                parameters:
                  - variable: a
                    type:
                      variable: a

        - name: record
          description: "A record, or labeled tuple"
          type:
            list:
              parameterized:
                genericType: Field
                parameters:
                  - variable: a
                    type:
                      variable: a

        - name: set
          description: "A set of terms"
          type:
            set:
              parameterized:
                genericType: Term
                parameters:
                  - variable: a
                    type:
                      variable: a

        - name: typeAbstraction
          description: "A type abstraction (generalization), which binds a type variable to a term"
          type:
            parameterized:
              genericType: TypeAbstraction
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: typeApplication
          description: "A type application (instantiation), which applies a term to a type"
          type:
            parameterized:
              genericType: TypeApplication
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: union
          description: "A union term, i.e. a generalization of inl() or inr()"
          type:
            parameterized:
              genericType: Field
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: variable
          description: "A variable reference"
          type: Variable

  - name: Field
    description: "A labeled term"
    type:
      record:
        - name: name
          type: FieldName

        - name: term
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: FieldName
    type: string

  - name: FieldType
    type:
      record:
        - name: name
          type: FieldName

        - name: type
          type: Type

  - name: FloatType
    type:
      enum:
        - name: bigfloat
        - name: float32
        - name: float64

  - name: FloatValue
    type:
      union:
        - name: bigfloat
          type:
            float:
              precision: arbitrary

        - name: float32
          type:
            float:
              precision:
                bits: 32

        - name: float64
          type:
            float:
              precision:
                bits: 64

  - name: FloatVariant
    type:
      enum:
        - bigfloat
        - float32
        - float64

  - name: Function
    type:
      union:
        - name: cases
          description: "A case statement applied to a variant record, consisting of a function term for each alternative in the union"
          type:
            list:
              parameterized:
                genericType: Field
                parameters:
                  - variable: a
                    type:
                      variable: a

        - name: compareTo
          description: "Compares a term with a given term of the same type, producing a Comparison"
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: data
          description: "Hydra's delta function, which maps an element to its data term"

        - name: lambda
          description: "A function abstraction (lambda)"
          type:
            parameterized:
              genericType: Lambda
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: primitive
          description: "A reference to a built-in (primitive) function"
          type: Name

        - name: projection
          description: "A projection of a field from a record"
          type: Projection

  - name: FunctionType
    description: "A function type, also known as an arrow type"
    type:
      record:
        - name: domain
          type: Type

        - name: codomain
          type: Type

  - name: FunctionVariant
    type:
      enum:
        - cases
        - compareTo
        - data
        - lambda
        - primitive
        - projection

  - name: If # TODO: temporary; remove me after the type inferencer is fully integrated
    type:
      record:
        - name: cond
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: then
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: else
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: IntegerType
    type:
      enum:
        - bigint
        - int8
        - int16
        - int32
        - int64
        - uint8
        - uint16
        - uint32
        - uint64

  - name: IntegerValue
    type:
      union:
        - name: bigint
          type:
            integer:
              precision: arbitrary

        - name: int8
          type:
            integer:
              precision:
                bits: 8

        - name: int16
          type:
            integer:
              precision:
                bits: 16

        - name: int32
          type:
            integer:
              precision:
                bits: 32

        - name: int64
          type:
            integer:
              precision:
                bits: 64

        - name: uint8
          type:
            integer:
              precision:
                bits: 8
              signed: false

        - name: uint16
          type:
            integer:
              precision:
                bits: 16
              signed: false

        - name: uint32
          type:
            integer:
              precision:
                bits: 32
              signed: false

        - name: uint64
          type:
            integer:
              precision:
                bits: 64
              signed: false

  - name: IntegerVariant
    type:
      enum:
        - bigint
        - int8
        - int16
        - int32
        - int64
        - uint8
        - uint16
        - uint32
        - uint64

  - name: Lambda
    description: "A function abstraction (lambda)"
    type:
      record:
        - name: parameter
          description: "The parameter of the lambda"
          type: Variable

        - name: body
          description: "The body of the lambda"
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: Let
    description: "A 'let' binding"
    type:
      record:
        - name: key
          type: Variable

        - name: value
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: environment
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: LiteralType
    description: "Any of a fixed set of literal types, also called atomic types, base types, primitive types, or type constants"
    comments:
      - "The so-called term constants, or valid values, of each literal type are unspecified"
    type:
      union:
        - name: binary

        - name: boolean

        - name: float
          type: FloatType

        - name: integer
          type: IntegerType

        - name: string

  - name: LiteralVariant
    type:
      enum:
        - binary
        - boolean
        - float
        - integer
        - string

  - name: Literal
    description: "A term constant; an instance of a literal type"
    type:
      union:
        - name: binary
          type: binary

        - name: boolean
          type: BooleanValue

        - name: float
          type: FloatValue

        - name: integer
          type: IntegerValue

        - name: string
          type: string

  - name: MapType
    type:
      record:
        - name: keys
          type: Type

        - name: values
          type: Type

  - name: Name
    type: string

  - name: Op # TODO: temporary; remove me after the type inferencer is fully integrated
    type:
      record:
        - name: op
          type: Binop

        - name: lhs
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: rhs
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: Precision
    type:
      union:
        - name: arbitrary

        - name: bits
          type: integer

  - name: Projection
    description: "A projection of a field from a record"
    type:
      record:
        - name: field
          description: "The projected field"
          type: FieldName

        - name: record
          description: "The name of the record element containing the field"
          comments:
            - "We assume that we can only project from named record types"
          type: Name

  - name: Term
    type:
      record:
        - name: data
          type:
            parameterized:
              genericType: Expression
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: meta
          type:
            variable: a

  - name: TermVariant
    type:
      enum:
        - application
        - element
        - function
        - let
        - list
        - literal
        - map
        - optional
        - record
        - set
        - typeAbstraction
        - typeApplication
        - union
        - variable

  - name: Type
    type:
      union:
        - name: element
          type: Type

        - name: function
          type: FunctionType

        - name: list
          type: Type

        - name: literal
          type: LiteralType

        - name: map
          type: MapType

        - name: nominal
          type: Name

        - name: optional
          type: Type

        - name: record
          type:
            list: FieldType

        - name: set
          type: Type

        - name: union
          type:
            list: FieldType

        - name: universal
          type: UniversalType

        - name: variable
          type: TypeVariable

  - name: TypeAbstraction
    description: "A type abstraction (generalization), which binds a type variable to a term"
    type:
      record:
        - name: parameter
          description: "The parameter of the abstraction"
          type: TypeVariable

        - name: body
          description: "The body of the abstraction"
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: TypeApplication
    description: "A type application (instantiation), which applies a term to a type"
    type:
      record:
        - name: function
          description: "A term which is the left-hand side of the application"
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

        - name: argument
          description: "A type which is the right-hand side of the application"
          type: Type

  - name: TypeScheme
    type:
      record:
        - name: variables
          type:
            list: TypeVariable

        - name: type
          type: Type

  - name: TypeVariable
    description: "A symbol which stands in for a type"
    type: string

  - name: TypeVariant
    type:
      enum:
        - element
        - function
        - list
        - literal
        - map
        - nominal
        - optional
        - record
        - set
        - union
        - universal
        - variable

  - name: TypedTerm
    type:
      record:
        - name: type
          type: Type

        - name: term
          type:
            parameterized:
              genericType: Term
              parameters:
                - variable: a
                  type:
                    variable: a

  - name: UniversalType
    description: "A universally quantified ('forall') type, parameterized by a type variable"
    type:
      record:
        - name: variable
          type: TypeVariable

        - name: body
          type: Type

  - name: Variable
    description: "A symbol which stands in for a term"
    type: string
