"""Test cases for primitive functions."""

from __future__ import annotations
from hydra.dsl.python import FrozenDict
import hydra.core
import hydra.lib.maps
import hydra.mantle
import hydra.test.testGraph
import hydra.testing

all_tests = hydra.testing.TestGroup("All tests", None, tuple(["formatting_tests", "inference_tests", "primitive_tests"]), tuple([]))

formatting_tests = hydra.testing.TestGroup("formatting tests", None, tuple([]), tuple([
  hydra.testing.TestCaseWithMetadata("#1 (lower_snake_case -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.UPPER_SNAKE, "a_hello_world_42_a42_42a_b", "A_HELLO_WORLD_42_A42_42A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#2 (lower_snake_case -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.CAMEL, "a_hello_world_42_a42_42a_b", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#3 (lower_snake_case -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.PASCAL, "a_hello_world_42_a42_42a_b", "AHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#4 (lower_snake_case -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.LOWER_SNAKE, "a_hello_world_42_a42_42a_b", "a_hello_world_42_a42_42a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#5 (UPPER_SNAKE_CASE -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.LOWER_SNAKE, "A_HELLO_WORLD_42_A42_42A_B", "a_hello_world_42_a42_42a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#6 (UPPER_SNAKE_CASE -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.CAMEL, "A_HELLO_WORLD_42_A42_42A_B", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#7 (UPPER_SNAKE_CASE -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.PASCAL, "A_HELLO_WORLD_42_A42_42A_B", "AHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#8 (UPPER_SNAKE_CASE -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.UPPER_SNAKE, "A_HELLO_WORLD_42_A42_42A_B", "A_HELLO_WORLD_42_A42_42A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#9 (camelCase -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.LOWER_SNAKE, "aHelloWorld42A4242aB", "a_hello_world42_a4242a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#10 (camelCase -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.UPPER_SNAKE, "aHelloWorld42A4242aB", "A_HELLO_WORLD42_A4242A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#11 (camelCase -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.PASCAL, "aHelloWorld42A4242aB", "AHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#12 (camelCase -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.CAMEL, "aHelloWorld42A4242aB", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#13 (PascalCase -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.LOWER_SNAKE, "AHelloWorld42A4242aB", "a_hello_world42_a4242a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#14 (PascalCase -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.UPPER_SNAKE, "AHelloWorld42A4242aB", "A_HELLO_WORLD42_A4242A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#15 (PascalCase -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.CAMEL, "AHelloWorld42A4242aB", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#16 (PascalCase -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.PASCAL, "AHelloWorld42A4242aB", "AHelloWorld42A4242aB")), None, tuple([]))]))

inference_tests = hydra.testing.TestGroup("Inference tests", None, tuple([
  hydra.testing.TestGroup("Algebraic terms", None, tuple([
    hydra.testing.TestGroup("List eliminations (folds)", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("List terms", None, tuple([
      hydra.testing.TestGroup("List of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralString("bar"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))))), None, tuple([]))])),
      hydra.testing.TestGroup("List of lists of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])),
          hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([]))])),
      hydra.testing.TestGroup("List containing an empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambda producing a polymorphic list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambda producing a list of integers", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))))), None, tuple([]))])),
      hydra.testing.TestGroup("List with repeated variables", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Map terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(FrozenDict({
        hydra.core.TermLiteral(hydra.core.LiteralString("firstName")): hydra.core.TermLiteral(hydra.core.LiteralString("Arthur")),
        hydra.core.TermLiteral(hydra.core.LiteralString("lastName")): hydra.core.TermLiteral(hydra.core.LiteralString("Dent"))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(FrozenDict({})), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Optional terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(None), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Product terms", None, tuple([
      hydra.testing.TestGroup("Empty products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Non-empty, monotyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))),
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(137.0)))]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))),
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(137.0)))]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Polytyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Pairs", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([hydra.core.TermList(tuple([])), hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t1")))]))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Set terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermLiteral(hydra.core.LiteralBoolean(True))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSet(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermSet(frozenset({}))})), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSet(hydra.core.TypeSet(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Sum terms", None, tuple([
      hydra.testing.TestGroup("Singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSum(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermList(tuple([])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Non-singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeVariable(hydra.core.Name("t0"))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(1, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Algorithm W test cases", None, tuple([
    hydra.testing.TestGroup("STLC to System F", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("sng"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermVariable(hydra.core.Name("sng")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("sng"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))),
        hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralString("alice"))))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))),
        hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("+"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("+")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("+")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#9", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#10", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("xx"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("yy"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("xx")))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#11", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("v")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([
        hydra.core.Name("t0"),
        hydra.core.Name("t1"),
        hydra.core.Name("t2"),
        hydra.core.Name("t3")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t2")), hydra.core.TypeVariable(hydra.core.Name("t3"))))))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#12", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("v")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#13", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([]))]))]), tuple([])),
  hydra.testing.TestGroup("Fundamentals", None, tuple([
    hydra.testing.TestGroup("Lambdas", None, tuple([
      hydra.testing.TestGroup("Simple lambdas", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt16(137)))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT16))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested lambdas", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeList(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested lambdas with shadowing", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Let terms", None, tuple([
      hydra.testing.TestGroup("Simple", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("x")))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Empty let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Trivial let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermVariable(hydra.core.Name("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))])),
      hydra.testing.TestGroup("Multiple references to a let-bound term", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermVariable(hydra.core.Name("bar")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermVariable(hydra.core.Name("bar"))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("foo")),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137)))])), None)]), hydra.core.TermVariable(hydra.core.Name("bar")))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("sng"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralString("bar")))), None),
          hydra.core.LetBinding(hydra.core.Name("quux"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermVariable(hydra.core.Name("x"))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("bar")),
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("quux")), hydra.core.TermList(tuple([]))))]))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))),
          hydra.core.TypeProduct(tuple([
            hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))),
            hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))]))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested let with shadowing", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralString("foo")), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermVariable(hydra.core.Name("foo")))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralString("foo")), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermVariable(hydra.core.Name("foo")), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("bar")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Let-polymorphism", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("x"))))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("x"))))]))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("list"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("list")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("list")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("singleton"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermProduct(tuple([
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("singleton")), hydra.core.TermVariable(hydra.core.Name("x")))),
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("singleton")), hydra.core.TermVariable(hydra.core.Name("y"))))])))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeVariable(hydra.core.Name("t0"))])))))), None, tuple([hydra.testing.Tag("disabled")])),
        hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("fortytwo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("fortytwo")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#8", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("fortytwo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("fortytwo")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Recursive and mutually recursive let (@wisnesky's test cases)", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermVariable(hydra.core.Name("y")), None),
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("y"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t1"))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("v")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1")))))),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("v0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([hydra.testing.Tag("disabled")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("plus"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("plus")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("plus")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("z"))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("p0"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("p0")))),
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("p0"))))]))))), None)]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("y"))))), None),
          hydra.core.LetBinding(hydra.core.Name("z"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("z"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeVariable(hydra.core.Name("t1"))))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("y"))))), None),
          hydra.core.LetBinding(hydra.core.Name("z"), hydra.core.TermVariable(hydra.core.Name("x")), None),
          hydra.core.LetBinding(hydra.core.Name("w"), hydra.core.TermVariable(hydra.core.Name("z")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("w")),
            hydra.core.TermVariable(hydra.core.Name("z"))]))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1"), hydra.core.Name("t2")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))),
          hydra.core.TypeProduct(tuple([
            hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeVariable(hydra.core.Name("t1")))),
            hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t2")), hydra.core.TypeVariable(hydra.core.Name("t2"))))]))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Recursive and mutually recursive let with polymorphism", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermVariable(hydra.core.Name("g")))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))])))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermVariable(hydra.core.Name("g")))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))])))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermVariable(hydra.core.Name("g")))))), None),
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))])))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Recursion involving polymorphic functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermList(tuple([
            hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))])))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermVariable(hydra.core.Name("x")))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermList(tuple([
            hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))])))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("inst"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None),
          hydra.core.LetBinding(hydra.core.Name("rec"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b0"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TermVariable(hydra.core.Name("b0")))))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("inst")),
          hydra.core.TermVariable(hydra.core.Name("rec"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeVariable(hydra.core.Name("t1")))), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("inst"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))), None),
          hydra.core.LetBinding(hydra.core.Name("rec"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("f"))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("inst")),
          hydra.core.TermVariable(hydra.core.Name("rec"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeVariable(hydra.core.Name("t0"))))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("inst1"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))), None),
          hydra.core.LetBinding(hydra.core.Name("inst2"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))))), None),
          hydra.core.LetBinding(hydra.core.Name("rec"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("f"))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("inst1")),
          hydra.core.TermVariable(hydra.core.Name("inst2")),
          hydra.core.TermVariable(hydra.core.Name("rec"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeVariable(hydra.core.Name("t0"))))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermVariable(hydra.core.Name("bar")), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermVariable(hydra.core.Name("foo")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermVariable(hydra.core.Name("bar"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t1"))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Literals", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralString("foo")), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit()))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(42.0))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT64))))), None, tuple([]))])),
    hydra.testing.TestGroup("Pathological terms", None, tuple([
      hydra.testing.TestGroup("Pathological recursion", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeVariable(hydra.core.Name("t0"))))), None, tuple([]))])),
      hydra.testing.TestGroup("Infinite lists", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("self"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermVariable(hydra.core.Name("self")))), None)]), hydra.core.TermVariable(hydra.core.Name("self")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("self"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("self")))), None)]), hydra.core.TermVariable(hydra.core.Name("self"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("self"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("e"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("e")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("self")), hydra.core.TermVariable(hydra.core.Name("e"))))))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("self")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabled")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("build"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("build")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("build")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Polymorphism", None, tuple([
      hydra.testing.TestGroup("Simple lists and optionals", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(None), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Lambdas, lists, and products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t0"))]))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))),
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("y")))))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("y")),
            hydra.core.TermVariable(hydra.core.Name("x"))]))))))))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeList(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t1")),
          hydra.core.TypeVariable(hydra.core.Name("t0"))])))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambdas and application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))), None, tuple([]))])),
      hydra.testing.TestGroup("Primitives and application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])),
          hydra.core.TermList(tuple([]))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambdas and primitives", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Mixed expressions with lambdas, constants, and primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Primitives", None, tuple([
      hydra.testing.TestGroup("Monomorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polymorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("el"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("el"))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("el"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermVariable(hydra.core.Name("el"))]))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lists"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("lists"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lists"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("lists"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("list"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("list")),
          hydra.core.TermList(tuple([]))]))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("list"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("list")),
          hydra.core.TermList(tuple([]))]))))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#8", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lists"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("lists"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Examples from the Hydra kernel", None, tuple([
    hydra.testing.TestGroup("Nested let", None, tuple([
      hydra.testing.TestGroup("hydra.formatting.mapFirstLetter", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("mapping"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("s"), None, hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("firstLetter"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("mapping")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermVariable(hydra.core.Name("list")))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("list"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermVariable(hydra.core.Name("s")))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.isEmpty"))), hydra.core.TermVariable(hydra.core.Name("s")))))), hydra.core.TermVariable(hydra.core.Name("s")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermVariable(hydra.core.Name("firstLetter")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermVariable(hydra.core.Name("list")))))))))))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Nominal terms", None, tuple([
    hydra.testing.TestGroup("Case statements", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationUnion(hydra.core.CaseStatement("hydra.test.test_graph.test_type_simple_number_name", None, tuple([
        hydra.core.Field(hydra.core.Name("int"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x")))))),
        hydra.core.Field(hydra.core.Name("float"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_simple_number_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationUnion(hydra.core.CaseStatement("hydra.test.test_graph.test_type_union_monomorphic_name", None, tuple([
        hydra.core.Field(hydra.core.Name("bool"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("_"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))),
        hydra.core.Field(hydra.core.Name("string"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("_"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))),
        hydra.core.Field(hydra.core.Name("unit"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("_"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_monomorphic_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit()))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Projections", None, tuple([
      hydra.testing.TestGroup("Record eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationRecord(hydra.core.Projection("hydra.test.test_graph.test_type_person_name", hydra.core.Name("firstName"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_person_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Records", None, tuple([
      hydra.testing.TestGroup("Simple records", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(37.774898529052734)))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(-122.41940307617188))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_poly_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(37.774898529052734)))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(-122.41940307617188))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_poly_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lon"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_poly_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(37.774898529052734)))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermVariable(hydra.core.Name("lon")))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_poly_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("latlon"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_poly_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermVariable(hydra.core.Name("latlon"))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermVariable(hydra.core.Name("latlon")))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_poly_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase("hydra.test.test_graph.test_data_arthur", hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_person_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Record instances of simply recursive record types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(43)))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_int_list_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_int_list_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(43)))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_list_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_list_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_list_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Record instances of mutually recursive record types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_a_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_b_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_buddy_list_a_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_a_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_b_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_buddy_list_a_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Variant terms", None, tuple([
      hydra.testing.TestGroup("Variants", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_timestamp_name", hydra.core.Field(hydra.core.Name("unixTimeMillis"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueUint64(1638200308368)))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_timestamp_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_monomorphic_name", hydra.core.Field(hydra.core.Name("string"), hydra.core.TermLiteral(hydra.core.LiteralString("bar"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_monomorphic_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Polymorphic and recursive variants", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("bool"), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_polymorphic_recursive_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("value"), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_polymorphic_recursive_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("other"), hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("value"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))), None)]), hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("other"), hydra.core.TermVariable(hydra.core.Name("other"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_polymorphic_recursive_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Wrapper introductions and eliminations", None, tuple([
      hydra.testing.TestGroup("Wrapper introductions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermWrap(hydra.core.WrappedTerm("hydra.test.test_graph.test_type_string_alias_name", hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_string_alias_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermWrap(hydra.core.WrappedTerm("hydra.test.test_graph.test_type_string_alias_name", hydra.core.TermVariable(hydra.core.Name("v"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeVariable("hydra.test.test_graph.test_type_string_alias_name")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Wrapper eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationWrap("hydra.test.test_graph.test_type_string_alias_name"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_string_alias_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationWrap("hydra.test.test_graph.test_type_string_alias_name"))), hydra.core.TermWrap(hydra.core.WrappedTerm("hydra.test.test_graph.test_type_string_alias_name", hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Simple terms", None, tuple([
    hydra.testing.TestGroup("Application terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))])),
    hydra.testing.TestGroup("Function terms", None, tuple([
      hydra.testing.TestGroup("Lambdas", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt16(137)))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT16))))))), None, tuple([]))])),
      hydra.testing.TestGroup("List eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Optional eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137)))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TermOptional(None))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.pure"))))), hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermList(tuple([])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Tuple projections", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 0)))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t1"))])), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 1)))), hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(1, 0)))), hydra.core.TermProduct(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(3, 2)))), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Individual terms", None, tuple([
      hydra.testing.TestGroup("Literal values", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralString("foo")), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit()))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(42.0))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT64))))), None, tuple([]))])),
      hydra.testing.TestGroup("Let terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("x")))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("square"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.mul"))), hydra.core.TermVariable(hydra.core.Name("z")))), hydra.core.TermVariable(hydra.core.Name("z"))))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("square")), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermVariable(hydra.core.Name("y")))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y"))))))))))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())))))), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit()))))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Optionals", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(None), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Sets", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermLiteral(hydra.core.LiteralBoolean(True))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSet(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(hydra.core.Unit())))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermSet(frozenset({}))})), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSet(hydra.core.TypeSet(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Maps", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(FrozenDict({
          hydra.core.TermLiteral(hydra.core.LiteralString("firstName")): hydra.core.TermLiteral(hydra.core.LiteralString("Arthur")),
          hydra.core.TermLiteral(hydra.core.LiteralString("lastName")): hydra.core.TermLiteral(hydra.core.LiteralString("Dent"))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(hydra.lib.maps.empty), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermMap(FrozenDict({
          hydra.core.TermVariable(hydra.core.Name("x")): hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(0.1))),
          hydra.core.TermVariable(hydra.core.Name("y")): hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(0.2)))})))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT64))))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Let terms", None, tuple([
      hydra.testing.TestGroup("Empty let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))])),
      hydra.testing.TestGroup("Trivial let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermVariable(hydra.core.Name("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("List terms", None, tuple([
      hydra.testing.TestGroup("List of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralString("bar"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))))), None, tuple([]))])),
      hydra.testing.TestGroup("List of lists of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])),
          hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([]))])),
      hydra.testing.TestGroup("List containing an empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambda producing a list of integers", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))))), None, tuple([]))])),
      hydra.testing.TestGroup("List with bound variables", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Primitive terms", None, tuple([
      hydra.testing.TestGroup("Monomorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polymorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("els"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("els"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Product terms", None, tuple([
      hydra.testing.TestGroup("Empty product", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Non-empty monotyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))),
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(137.0)))]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polytyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Sum terms", None, tuple([
      hydra.testing.TestGroup("Singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSum(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermList(tuple([])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Non-singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit())),
          hydra.core.TypeVariable(hydra.core.Name("t0"))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(1, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(hydra.core.Unit()))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([]))]), tuple([]))

list_primitive_tests = hydra.testing.TestGroup("hydra.lib.lists primitives", None, tuple([
  hydra.testing.TestGroup("apply", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.apply"))), hydra.core.TermList(tuple([
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))),
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower")))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("One")),
      hydra.core.TermLiteral(hydra.core.LiteralString("Two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("Three"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("ONE")),
      hydra.core.TermLiteral(hydra.core.LiteralString("TWO")),
      hydra.core.TermLiteral(hydra.core.LiteralString("THREE")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("bind", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.bind"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("arg_"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("arg_"))))))))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-4)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("concat", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("head", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), None, tuple([]))])),
  hydra.testing.TestGroup("intercalate", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("intersperse", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intersperse"))), hydra.core.TermLiteral(hydra.core.LiteralString("and")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("and")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("and")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("last", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.last"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([]))])),
  hydra.testing.TestGroup("length", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([]))])),
  hydra.testing.TestGroup("map", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.map"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("ONE")),
      hydra.core.TermLiteral(hydra.core.LiteralString("TWO"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("pure", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermLiteral(hydra.core.LiteralString("one")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("one"))])))), None, tuple([]))]))]), tuple([]))

primitive_tests = hydra.testing.TestGroup("Primitive functions", "Test cases for primitive functions", tuple(["list_primitive_tests", "string_primitive_tests"]), tuple([]))

string_primitive_tests = hydra.testing.TestGroup("hydra.lib.strings primitives", None, tuple([
  hydra.testing.TestGroup("cat", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("onetwothree")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("2", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), hydra.core.TermLiteral(hydra.core.LiteralString("one")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("3", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([]))])),
  hydra.testing.TestGroup("length", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("2", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("3", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("one")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([]))])),
  hydra.testing.TestGroup("splitOn", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("ss")))), hydra.core.TermLiteral(hydra.core.LiteralString("Mississippi")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("Mi")),
      hydra.core.TermLiteral(hydra.core.LiteralString("i")),
      hydra.core.TermLiteral(hydra.core.LiteralString("ippi"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("2", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("Mississippi")))), hydra.core.TermLiteral(hydra.core.LiteralString("Mississippi")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("3", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralString("one two three")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("4", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralString(" one two three ")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("5", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralString("  one two three")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("6", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("  ")))), hydra.core.TermLiteral(hydra.core.LiteralString("  one two three")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one two three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("6", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("aa")))), hydra.core.TermLiteral(hydra.core.LiteralString("aaa")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("7", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("8", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("abc")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("9", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([]))])),
  hydra.testing.TestGroup("toLower", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("One TWO threE")))), hydra.core.TermLiteral(hydra.core.LiteralString("one two three")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("2", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("Abc123")))), hydra.core.TermLiteral(hydra.core.LiteralString("abc123")))), None, tuple([]))])),
  hydra.testing.TestGroup("toUpper", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("1", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("One TWO threE")))), hydra.core.TermLiteral(hydra.core.LiteralString("ONE TWO THREE")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("2", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("Abc123")))), hydra.core.TermLiteral(hydra.core.LiteralString("ABC123")))), None, tuple([]))]))]), tuple([]))
