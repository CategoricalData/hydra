"""Test cases for primitive functions."""

from __future__ import annotations
from hydra.dsl.python import FrozenDict
import hydra.core
import hydra.lib.maps
import hydra.mantle
import hydra.test.test_graph
import hydra.testing

all_tests = hydra.testing.TestGroup("All tests", None, tuple(["formatting_tests", "inference_tests", "primitive_tests"]), tuple([]))

formatting_tests = hydra.testing.TestGroup("formatting tests", None, tuple([]), tuple([
  hydra.testing.TestCaseWithMetadata("#1 (lower_snake_case -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.UPPER_SNAKE, "a_hello_world_42_a42_42a_b", "A_HELLO_WORLD_42_A42_42A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#2 (lower_snake_case -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.CAMEL, "a_hello_world_42_a42_42a_b", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#3 (lower_snake_case -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.PASCAL, "a_hello_world_42_a42_42a_b", "AHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#4 (lower_snake_case -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.LOWER_SNAKE, hydra.mantle.CaseConvention.LOWER_SNAKE, "a_hello_world_42_a42_42a_b", "a_hello_world_42_a42_42a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#5 (UPPER_SNAKE_CASE -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.LOWER_SNAKE, "A_HELLO_WORLD_42_A42_42A_B", "a_hello_world_42_a42_42a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#6 (UPPER_SNAKE_CASE -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.CAMEL, "A_HELLO_WORLD_42_A42_42A_B", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#7 (UPPER_SNAKE_CASE -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.PASCAL, "A_HELLO_WORLD_42_A42_42A_B", "AHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#8 (UPPER_SNAKE_CASE -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.UPPER_SNAKE, hydra.mantle.CaseConvention.UPPER_SNAKE, "A_HELLO_WORLD_42_A42_42A_B", "A_HELLO_WORLD_42_A42_42A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#9 (camelCase -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.LOWER_SNAKE, "aHelloWorld42A4242aB", "a_hello_world42_a4242a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#10 (camelCase -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.UPPER_SNAKE, "aHelloWorld42A4242aB", "A_HELLO_WORLD42_A4242A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#11 (camelCase -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.PASCAL, "aHelloWorld42A4242aB", "AHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#12 (camelCase -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.CAMEL, hydra.mantle.CaseConvention.CAMEL, "aHelloWorld42A4242aB", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#13 (PascalCase -> lower_snake_case)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.LOWER_SNAKE, "AHelloWorld42A4242aB", "a_hello_world42_a4242a_b")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#14 (PascalCase -> UPPER_SNAKE_CASE)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.UPPER_SNAKE, "AHelloWorld42A4242aB", "A_HELLO_WORLD42_A4242A_B")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#15 (PascalCase -> camelCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.CAMEL, "AHelloWorld42A4242aB", "aHelloWorld42A4242aB")), None, tuple([])),
  hydra.testing.TestCaseWithMetadata("#16 (PascalCase -> PascalCase)", hydra.testing.TestCaseCaseConversion(hydra.testing.CaseConversionTestCase(hydra.mantle.CaseConvention.PASCAL, hydra.mantle.CaseConvention.PASCAL, "AHelloWorld42A4242aB", "AHelloWorld42A4242aB")), None, tuple([]))]))

inference_tests = hydra.testing.TestGroup("Inference tests", None, tuple([
  hydra.testing.TestGroup("Algebraic terms", None, tuple([
    hydra.testing.TestGroup("List eliminations (folds)", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("List terms", None, tuple([
      hydra.testing.TestGroup("List of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralString("bar"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))))), None, tuple([]))])),
      hydra.testing.TestGroup("List of lists of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])),
          hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([]))])),
      hydra.testing.TestGroup("List containing an empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambda producing a polymorphic list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambda producing a list of integers", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))))), None, tuple([]))])),
      hydra.testing.TestGroup("List with repeated variables", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Map terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(FrozenDict({
        hydra.core.TermLiteral(hydra.core.LiteralString("firstName")): hydra.core.TermLiteral(hydra.core.LiteralString("Arthur")),
        hydra.core.TermLiteral(hydra.core.LiteralString("lastName")): hydra.core.TermLiteral(hydra.core.LiteralString("Dent"))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(FrozenDict({})), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Optional terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(None), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Product terms", None, tuple([
      hydra.testing.TestGroup("Empty products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Non-empty, monotyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))),
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(137.0)))]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))),
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(137.0)))]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Polytyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Pairs", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([hydra.core.TermList(tuple([])), hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t1")))]))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Set terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermLiteral(hydra.core.LiteralBoolean(True))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSet(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermSet(frozenset({}))})), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSet(hydra.core.TypeSet(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Sum terms", None, tuple([
      hydra.testing.TestGroup("Singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSum(tuple([hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermList(tuple([])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Non-singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeVariable(hydra.core.Name("t0"))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(1, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Algorithm W test cases", None, tuple([
    hydra.testing.TestGroup("STLC to System F", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("sng"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermVariable(hydra.core.Name("sng")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("sng"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))),
        hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralString("alice"))))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))),
        hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("+"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("+")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("+")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#9", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#10", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("xx"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("yy"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("xx")))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#11", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("v")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([
        hydra.core.Name("t0"),
        hydra.core.Name("t1"),
        hydra.core.Name("t2"),
        hydra.core.Name("t3")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t2")), hydra.core.TypeVariable(hydra.core.Name("t3"))))))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#12", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("v")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#13", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
        hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
        hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
        hydra.core.TermVariable(hydra.core.Name("f")),
        hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0")))))),
        hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([]))]))]), tuple([])),
  hydra.testing.TestGroup("Expected failures", None, tuple([
    hydra.testing.TestGroup("Undefined variable", None, tuple([
      hydra.testing.TestGroup("Basic unbound variables", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermVariable(hydra.core.Name("x")))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("y"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermVariable(hydra.core.Name("y")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Unbound in let expressions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermVariable(hydra.core.Name("y")), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermVariable(hydra.core.Name("y")), None),
          hydra.core.LetBinding(hydra.core.Name("z"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None),
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermVariable(hydra.core.Name("z")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("y"))])))))), None, tuple([]))])),
      hydra.testing.TestGroup("Shadowing scope errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermVariable(hydra.core.Name("z"))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermVariable(hydra.core.Name("z")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("z"))))), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Unification failure", None, tuple([
      hydra.testing.TestGroup("Basic type mismatches", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TermLiteral(hydra.core.LiteralString("bar")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Collection type mismatches", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("not a list")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))]))])))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])),
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))]))])), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])),
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))]))])))))), None, tuple([]))])),
      hydra.testing.TestGroup("Conditional type mismatches", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polymorphic instantiation conflicts", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("cons"), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("cons")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("cons")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Invalid application", None, tuple([
      hydra.testing.TestGroup("Non-function application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermLiteral(hydra.core.LiteralString("foo")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(3.14))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Collection application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), hydra.core.TermLiteral(hydra.core.LiteralString("bar")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermList(tuple([])), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])), hydra.core.TermLiteral(hydra.core.LiteralString("index")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Primitive misapplication", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.maps.empty"))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.sets.empty"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermOptional(None), hydra.core.TermLiteral(hydra.core.LiteralString("value")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermList(tuple([])), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Self-application", None, tuple([
      hydra.testing.TestGroup("Direct self-application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("f")))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Indirect self-application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("f"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("y")), hydra.core.TermVariable(hydra.core.Name("y"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("a"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("b")), hydra.core.TermVariable(hydra.core.Name("a")))), None),
          hydra.core.LetBinding(hydra.core.Name("b"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("a")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("cycle"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("cycle"))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("cycle")), hydra.core.TermVariable(hydra.core.Name("cycle")))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Arity mismatch", None, tuple([
      hydra.testing.TestGroup("Too many arguments", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(999))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("x")))))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("extra")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Wrong argument types with extra args", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("extra")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.not"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))), hydra.core.TermLiteral(hydra.core.LiteralString("arg")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Recursive type construction", None, tuple([
      hydra.testing.TestGroup("Direct recursive types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))])), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("x")),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("x")),
            hydra.core.TermVariable(hydra.core.Name("x"))])), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Recursive function types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("f"))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("f")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))]))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Mutually recursive types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("y"))])), None),
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("x")),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), None)]), hydra.core.TermVariable(hydra.core.Name("x")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("a"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("b"))))), None),
          hydra.core.LetBinding(hydra.core.Name("b"), hydra.core.TermVariable(hydra.core.Name("a")), None)]), hydra.core.TermVariable(hydra.core.Name("a")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("g"))])), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("f")),
            hydra.core.TermVariable(hydra.core.Name("f"))])), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Occur check failures", None, tuple([
      hydra.testing.TestGroup("Function occur checks", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("h"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("g")))), hydra.core.TermVariable(hydra.core.Name("h"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("g")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Mutual occur checks", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("f"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("g"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("a"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("b")), hydra.core.TermVariable(hydra.core.Name("a")))), hydra.core.TermVariable(hydra.core.Name("x"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("b"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("a")), hydra.core.TermVariable(hydra.core.Name("b"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("a")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("cycle1"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("cycle2")), hydra.core.TermVariable(hydra.core.Name("cycle1")))), None),
          hydra.core.LetBinding(hydra.core.Name("cycle2"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("cycle1")), hydra.core.TermVariable(hydra.core.Name("x"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("cycle1")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Complex occur checks", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("omega"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("omega"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("omega")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("loop"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("loop")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("loop")))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("loop")))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Type constructor misuse", None, tuple([
      hydra.testing.TestGroup("List constructor errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermLiteral(hydra.core.LiteralString("not a list")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([]))])),
      hydra.testing.TestGroup("String constructor errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermLiteral(hydra.core.LiteralString("not a list")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Math constructor errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TermLiteral(hydra.core.LiteralString("not a number")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.mul"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("not a number")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.div"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Polymorphism violations", None, tuple([
      hydra.testing.TestGroup("Identity function violations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Constrained polymorphism violations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
            hydra.core.TermVariable(hydra.core.Name("x")),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("x")),
            hydra.core.TermLiteral(hydra.core.LiteralString("constant"))]))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 0, None)))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 0, None)))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralString("bad")))))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("h"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))]))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("h")), hydra.core.TermLiteral(hydra.core.LiteralString("incompatible")))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Higher-order polymorphism violations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))]))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("g"), None, hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralString("bad"))))]))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("h"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("h")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("h")), hydra.core.TermLiteral(hydra.core.LiteralString("error"))))))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Let binding type mismatches", None, tuple([
      hydra.testing.TestGroup("Application type mismatches", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None),
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), None)]), hydra.core.TermVariable(hydra.core.Name("y")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralString("result"))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("extra")))), None)]), hydra.core.TermVariable(hydra.core.Name("g")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("num"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("num")), hydra.core.TermVariable(hydra.core.Name("num")))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Collection type mismatches", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("list1"), hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), None),
          hydra.core.LetBinding(hydra.core.Name("list2"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TermVariable(hydra.core.Name("list1")))), None)]), hydra.core.TermVariable(hydra.core.Name("list2")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("nums"), hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])), None),
          hydra.core.LetBinding(hydra.core.Name("mixed"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralString("bad")))), hydra.core.TermVariable(hydra.core.Name("nums")))), None)]), hydra.core.TermVariable(hydra.core.Name("mixed")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("pair1"), hydra.core.TermProduct(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
            hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), None),
          hydra.core.LetBinding(hydra.core.Name("pair2"), hydra.core.TermProduct(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralString("bar")),
            hydra.core.TermVariable(hydra.core.Name("pair1"))])), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 0, None)))), hydra.core.TermVariable(hydra.core.Name("pair2")))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Function binding mismatches", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("add"), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), None),
          hydra.core.LetBinding(hydra.core.Name("badCall"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("add")), hydra.core.TermLiteral(hydra.core.LiteralString("not a number")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None)]), hydra.core.TermVariable(hydra.core.Name("badCall")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("x")))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Constraint solver edge cases", None, tuple([
      hydra.testing.TestGroup("Complex constraint propagation", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("complex"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("g"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x"))))))))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("complex")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("a"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b"), None, hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Fixed point combinators", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("fix"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("f"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("fix")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x")))))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("y")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("rec"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("n"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("rec")))))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("omega"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("x"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("omega")), hydra.core.TermVariable(hydra.core.Name("omega")))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Constraint cycles", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("a"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("b")), hydra.core.TermVariable(hydra.core.Name("c")))), hydra.core.TermVariable(hydra.core.Name("x"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("b"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("c")), hydra.core.TermVariable(hydra.core.Name("a")))), hydra.core.TermVariable(hydra.core.Name("y"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("c"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("a")), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermVariable(hydra.core.Name("z"))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("a")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("circular"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("circular")))), hydra.core.TermVariable(hydra.core.Name("f"))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("circular")), hydra.core.TermVariable(hydra.core.Name("circular")))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Primitive function type errors", None, tuple([
      hydra.testing.TestGroup("Logic primitive errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.and"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.or"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermLiteral(hydra.core.LiteralString("not boolean")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Collection primitive errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.maps.lookup"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("not a map")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.sets.member"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermLiteral(hydra.core.LiteralString("not a list")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.fromMaybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("not optional")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Math primitive errors", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermLiteral(hydra.core.LiteralString("not a number")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.mul"))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.div"))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.mod"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermLiteral(hydra.core.LiteralString("not a number")))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Complex constraint failures", None, tuple([
      hydra.testing.TestGroup("Multi-level constraint conflicts", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("x")),
            hydra.core.TermVariable(hydra.core.Name("y"))])))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("a"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("a")))), hydra.core.TermVariable(hydra.core.Name("a"))))))), None),
          hydra.core.LetBinding(hydra.core.Name("h"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("z"))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("h")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("weird"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("weird")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("y")),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("nested"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("g"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("x"))))))))))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("int_f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("n"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("n")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))), None),
          hydra.core.LetBinding(hydra.core.Name("str_g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("s"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
            hydra.core.TermVariable(hydra.core.Name("s")),
            hydra.core.TermLiteral(hydra.core.LiteralString("!"))]))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("nested")), hydra.core.TermVariable(hydra.core.Name("int_f")))), hydra.core.TermVariable(hydra.core.Name("str_g")))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([]))])),
      hydra.testing.TestGroup("Function composition failures", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("triple"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("increment"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("n"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("n")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))), None),
          hydra.core.LetBinding(hydra.core.Name("stringify"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("s"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
            hydra.core.TermVariable(hydra.core.Name("s")),
            hydra.core.TermLiteral(hydra.core.LiteralString("!"))]))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("triple")), hydra.core.TermVariable(hydra.core.Name("increment")))), hydra.core.TermVariable(hydra.core.Name("stringify")))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInferenceFailure(hydra.testing.InferenceFailureTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("compose"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("g"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("x"))))))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("reverse_compose"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("g"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("x"))))))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("bad"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("compose")), hydra.core.TermVariable(hydra.core.Name("reverse_compose")))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))))), None)]), hydra.core.TermVariable(hydra.core.Name("bad")))))), None, tuple([]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Fundamentals", None, tuple([
    hydra.testing.TestGroup("Lambdas", None, tuple([
      hydra.testing.TestGroup("Simple lambdas", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt16(137)))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT16))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested lambdas", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeList(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested lambdas with shadowing", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Let terms", None, tuple([
      hydra.testing.TestGroup("Simple", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("x")))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Empty let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Trivial let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermVariable(hydra.core.Name("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))])),
      hydra.testing.TestGroup("Multiple references to a let-bound term", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermVariable(hydra.core.Name("bar")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermVariable(hydra.core.Name("bar"))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("foo")),
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137)))])), None)]), hydra.core.TermVariable(hydra.core.Name("bar")))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("sng"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermLiteral(hydra.core.LiteralString("bar")))), None),
          hydra.core.LetBinding(hydra.core.Name("quux"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("sng")), hydra.core.TermVariable(hydra.core.Name("x"))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("bar")),
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("quux")), hydra.core.TermList(tuple([]))))]))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))),
          hydra.core.TypeProduct(tuple([
            hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))),
            hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))]))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Nested let with shadowing", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralString("foo")), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermVariable(hydra.core.Name("foo")))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralString("foo")), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermVariable(hydra.core.Name("foo")), None)]), hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("bar")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Let-polymorphism", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("x"))))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermList(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("x"))))]))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("list"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("list")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))),
          hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("list")), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("singleton"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermProduct(tuple([
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("singleton")), hydra.core.TermVariable(hydra.core.Name("x")))),
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("singleton")), hydra.core.TermVariable(hydra.core.Name("y"))))])))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeVariable(hydra.core.Name("t0"))])))))), None, tuple([hydra.testing.Tag("disabled")])),
        hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("fortytwo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("fortytwo")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#8", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("fortytwo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None),
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("fortytwo")),
          hydra.core.TermVariable(hydra.core.Name("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Recursive and mutually recursive let (@wisnesky's test cases)", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermVariable(hydra.core.Name("y")), None),
          hydra.core.LetBinding(hydra.core.Name("y"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("y"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t1"))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermVariable(hydra.core.Name("x")))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("u"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("v")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeVariable(hydra.core.Name("t1")))))),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("v0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))]))))), None, tuple([hydra.testing.Tag("disabled")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("plus"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("plus")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermVariable(hydra.core.Name("y")))))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("plus")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("z"))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("p0"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("p0")))),
            hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("p0"))))]))))), None)]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("y"))))), None),
          hydra.core.LetBinding(hydra.core.Name("z"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("z"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeVariable(hydra.core.Name("t1"))))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("y"))))), None),
          hydra.core.LetBinding(hydra.core.Name("z"), hydra.core.TermVariable(hydra.core.Name("x")), None),
          hydra.core.LetBinding(hydra.core.Name("w"), hydra.core.TermVariable(hydra.core.Name("z")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("w")),
            hydra.core.TermVariable(hydra.core.Name("z"))]))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1"), hydra.core.Name("t2")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))),
          hydra.core.TypeProduct(tuple([
            hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeVariable(hydra.core.Name("t1")))),
            hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t2")), hydra.core.TypeVariable(hydra.core.Name("t2"))))]))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Recursive and mutually recursive let with polymorphism", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermVariable(hydra.core.Name("g")))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))])))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermVariable(hydra.core.Name("g")))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))])))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermVariable(hydra.core.Name("g")))))), None),
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("f"))])))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("f")),
          hydra.core.TermVariable(hydra.core.Name("g"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Recursion involving polymorphic functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermList(tuple([
            hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))])))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermVariable(hydra.core.Name("x")))))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("b")))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermList(tuple([
            hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))])))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("inst"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None),
          hydra.core.LetBinding(hydra.core.Name("rec"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("b0"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TermVariable(hydra.core.Name("b0")))))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("inst")),
          hydra.core.TermVariable(hydra.core.Name("rec"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("inst"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))), None),
          hydra.core.LetBinding(hydra.core.Name("rec"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("f"))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("inst")),
          hydra.core.TermVariable(hydra.core.Name("rec"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeVariable(hydra.core.Name("t0"))))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("inst1"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))), None),
          hydra.core.LetBinding(hydra.core.Name("inst2"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))))), None),
          hydra.core.LetBinding(hydra.core.Name("rec"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("rec")), hydra.core.TermVariable(hydra.core.Name("f"))))))))), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("inst1")),
          hydra.core.TermVariable(hydra.core.Name("inst2")),
          hydra.core.TermVariable(hydra.core.Name("rec"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeVariable(hydra.core.Name("t0"))))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermVariable(hydra.core.Name("bar")), None),
          hydra.core.LetBinding(hydra.core.Name("bar"), hydra.core.TermVariable(hydra.core.Name("foo")), None)]), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("foo")),
          hydra.core.TermVariable(hydra.core.Name("bar"))])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t1"))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Literals", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralString("foo")), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(42.0))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT64))))), None, tuple([]))])),
    hydra.testing.TestGroup("Pathological terms", None, tuple([
      hydra.testing.TestGroup("Recursion", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermVariable(hydra.core.Name("x")), None)]), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeVariable(hydra.core.Name("t0"))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("id"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), None),
          hydra.core.LetBinding(hydra.core.Name("weird"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("id")), hydra.core.TermVariable(hydra.core.Name("id")))), hydra.core.TermVariable(hydra.core.Name("id")))), None)]), hydra.core.TermVariable(hydra.core.Name("weird")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("f")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("x")), hydra.core.TermVariable(hydra.core.Name("y"))))))), None)]), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("paradox"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("paradox")), hydra.core.TermVariable(hydra.core.Name("f"))))))))), None)]), hydra.core.TermVariable(hydra.core.Name("paradox")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("f"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("g"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermVariable(hydra.core.Name("y"))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("g")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))])),
      hydra.testing.TestGroup("Infinite lists", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("self"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermVariable(hydra.core.Name("self")))), None)]), hydra.core.TermVariable(hydra.core.Name("self")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("self"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("self")))), None)]), hydra.core.TermVariable(hydra.core.Name("self"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("self"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("e"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("e")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("self")), hydra.core.TermVariable(hydra.core.Name("e"))))))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("self")), hydra.core.TermVariable(hydra.core.Name("x"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabled")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("build"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("build")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))))))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("build")), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Polymorphism", None, tuple([
      hydra.testing.TestGroup("Simple lists and optionals", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(None), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Lambdas, lists, and products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t0"))]))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))),
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermVariable(hydra.core.Name("y")))))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermProduct(tuple([
            hydra.core.TermVariable(hydra.core.Name("y")),
            hydra.core.TermVariable(hydra.core.Name("x"))]))))))))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeList(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t1")),
          hydra.core.TypeVariable(hydra.core.Name("t0"))])))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambdas and application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))), None, tuple([]))])),
      hydra.testing.TestGroup("Primitives and application", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])),
          hydra.core.TermList(tuple([]))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambdas and primitives", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Mixed expressions with lambdas, constants, and primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Primitives", None, tuple([
      hydra.testing.TestGroup("Monomorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polymorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("el"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("el"))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("el"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermVariable(hydra.core.Name("el"))]))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lists"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("lists"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lists"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("lists"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#6", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("list"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("list")),
          hydra.core.TermList(tuple([]))]))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#7", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("list"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("list")),
          hydra.core.TermList(tuple([]))]))))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#8", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lists"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("lists"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Examples from the Hydra kernel", None, tuple([
    hydra.testing.TestGroup("Nested let", None, tuple([
      hydra.testing.TestGroup("hydra.formatting.mapFirstLetter", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("mapping"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("s"), None, hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("firstLetter"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("mapping")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermVariable(hydra.core.Name("list")))))))))), None),
          hydra.core.LetBinding(hydra.core.Name("list"), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermVariable(hydra.core.Name("s")))), None)]), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermVariable(hydra.core.Name("s")))))), hydra.core.TermVariable(hydra.core.Name("s")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermVariable(hydra.core.Name("firstLetter")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermVariable(hydra.core.Name("list")))))))))))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Nominal terms", None, tuple([
    hydra.testing.TestGroup("Case statements", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationUnion(hydra.core.CaseStatement("hydra.test.test_graph.test_type_simple_number_name", None, tuple([
        hydra.core.Field(hydra.core.Name("int"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x")))))),
        hydra.core.Field(hydra.core.Name("float"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_simple_number_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationUnion(hydra.core.CaseStatement("hydra.test.test_graph.test_type_union_monomorphic_name", None, tuple([
        hydra.core.Field(hydra.core.Name("bool"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("_"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))))),
        hydra.core.Field(hydra.core.Name("string"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("_"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))))),
        hydra.core.Field(hydra.core.Name("unit"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("_"), None, hydra.core.TermLiteral(hydra.core.LiteralBoolean(False))))))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_monomorphic_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
    hydra.testing.TestGroup("Projections", None, tuple([
      hydra.testing.TestGroup("Record eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationRecord(hydra.core.Projection("hydra.test.test_graph.test_type_person_name", hydra.core.Name("firstName"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_person_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Records", None, tuple([
      hydra.testing.TestGroup("Simple records", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(37.774898529052734)))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(-122.41940307617188))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_poly_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(37.774898529052734)))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(-122.41940307617188))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_poly_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("lon"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_poly_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(37.774898529052734)))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermVariable(hydra.core.Name("lon")))])))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_poly_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("latlon"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_lat_lon_poly_name", tuple([
          hydra.core.Field(hydra.core.Name("lat"), hydra.core.TermVariable(hydra.core.Name("latlon"))),
          hydra.core.Field(hydra.core.Name("lon"), hydra.core.TermVariable(hydra.core.Name("latlon")))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_lat_lon_poly_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase("hydra.test.test_graph.test_data_arthur", hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_person_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Record instances of simply recursive record types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(43)))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_int_list_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_int_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_int_list_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(43)))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))]))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_list_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_list_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_list_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_list_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Record instances of mutually recursive record types", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_a_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_b_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_buddy_list_a_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_a_name", tuple([
          hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
          hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(hydra.core.TermRecord(hydra.core.Record("hydra.test.test_graph.test_type_buddy_list_b_name", tuple([
            hydra.core.Field(hydra.core.Name("head"), hydra.core.TermVariable(hydra.core.Name("x"))),
            hydra.core.Field(hydra.core.Name("tail"), hydra.core.TermOptional(None))])))))])))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_buddy_list_a_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Variant terms", None, tuple([
      hydra.testing.TestGroup("Variants", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_timestamp_name", hydra.core.Field(hydra.core.Name("unixTimeMillis"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueUint64(1638200308368)))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_timestamp_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_monomorphic_name", hydra.core.Field(hydra.core.Name("string"), hydra.core.TermLiteral(hydra.core.LiteralString("bar"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_monomorphic_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Polymorphic and recursive variants", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("bool"), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_polymorphic_recursive_name"), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("value"), hydra.core.TermLiteral(hydra.core.LiteralString("foo"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_polymorphic_recursive_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("other"), hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("value"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))), None)]), hydra.core.TermUnion(hydra.core.Injection("hydra.test.test_graph.test_type_union_polymorphic_recursive_name", hydra.core.Field(hydra.core.Name("other"), hydra.core.TermVariable(hydra.core.Name("other"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeApplication(hydra.core.ApplicationType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_union_polymorphic_recursive_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Wrapper introductions and eliminations", None, tuple([
      hydra.testing.TestGroup("Wrapper introductions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermWrap(hydra.core.WrappedTerm("hydra.test.test_graph.test_type_string_alias_name", hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeVariable("hydra.test.test_graph.test_type_string_alias_name")))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("v"), None, hydra.core.TermWrap(hydra.core.WrappedTerm("hydra.test.test_graph.test_type_string_alias_name", hydra.core.TermVariable(hydra.core.Name("v"))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeVariable("hydra.test.test_graph.test_type_string_alias_name")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Wrapper eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationWrap("hydra.test.test_graph.test_type_string_alias_name"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable("hydra.test.test_graph.test_type_string_alias_name"), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationWrap("hydra.test.test_graph.test_type_string_alias_name"))), hydra.core.TermWrap(hydra.core.WrappedTerm("hydra.test.test_graph.test_type_string_alias_name", hydra.core.TermLiteral(hydra.core.LiteralString("foo")))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([])),
  hydra.testing.TestGroup("Simple terms", None, tuple([
    hydra.testing.TestGroup("Application terms", None, tuple([]), tuple([
      hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))), None, tuple([])),
      hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))])),
    hydra.testing.TestGroup("Function terms", None, tuple([
      hydra.testing.TestGroup("Lambdas", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermVariable(hydra.core.Name("x"))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt16(137)))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT16))))))), None, tuple([]))])),
      hydra.testing.TestGroup("List eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.foldl"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.add"))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Optional eliminations", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(137)))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TermOptional(None))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.pure"))))), hydra.core.TermVariable(hydra.core.Name("x"))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#5", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.optionals.maybe"))), hydra.core.TermList(tuple([])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0"))), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Tuple projections", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 0, None)))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeProduct(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeVariable(hydra.core.Name("t1"))])), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(2, 1, None)))), hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(1, 0, None)))), hydra.core.TermProduct(tuple([hydra.core.TermVariable(hydra.core.Name("x"))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionElimination(hydra.core.EliminationProduct(hydra.core.TupleProjection(3, 2, None)))), hydra.core.TermProduct(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Individual terms", None, tuple([
      hydra.testing.TestGroup("Literal values", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralString("foo")), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#4", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(42.0))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT64))))), None, tuple([]))])),
      hydra.testing.TestGroup("Let terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("x"), hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermVariable(hydra.core.Name("x")))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t1")), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32))))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("square"), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("z"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.mul"))), hydra.core.TermVariable(hydra.core.Name("z")))), hydra.core.TermVariable(hydra.core.Name("z"))))))), None)]), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("f"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.logic.ifElse"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("square")), hydra.core.TermVariable(hydra.core.Name("x")))))), hydra.core.TermVariable(hydra.core.Name("y")))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y")))))))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermVariable(hydra.core.Name("f")), hydra.core.TermVariable(hydra.core.Name("x")))), hydra.core.TermVariable(hydra.core.Name("y"))))))))))))))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)))))), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None))))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Optionals", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeOptional(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermOptional(None), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeOptional(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Sets", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermLiteral(hydra.core.LiteralBoolean(True))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSet(hydra.core.TypeLiteral(hydra.core.LiteralTypeBoolean(None)))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSet(frozenset({hydra.core.TermSet(frozenset({}))})), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSet(hydra.core.TypeSet(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Maps", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(FrozenDict({
          hydra.core.TermLiteral(hydra.core.LiteralString("firstName")): hydra.core.TermLiteral(hydra.core.LiteralString("Arthur")),
          hydra.core.TermLiteral(hydra.core.LiteralString("lastName")): hydra.core.TermLiteral(hydra.core.LiteralString("Dent"))})), hydra.core.TypeScheme(tuple([]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermMap(hydra.lib.maps.empty), hydra.core.TypeScheme(tuple([hydra.core.Name("t0"), hydra.core.Name("t1")]), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeVariable(hydra.core.Name("t1"))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#3", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("y"), None, hydra.core.TermMap(FrozenDict({
          hydra.core.TermVariable(hydra.core.Name("x")): hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(0.1))),
          hydra.core.TermVariable(hydra.core.Name("y")): hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat64(0.2)))})))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeMap(hydra.core.MapType(hydra.core.TypeVariable(hydra.core.Name("t0")), hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT64))))))))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([])),
    hydra.testing.TestGroup("Let terms", None, tuple([
      hydra.testing.TestGroup("Empty let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([]), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))])),
      hydra.testing.TestGroup("Trivial let", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermLet(hydra.core.Let(tuple([
          hydra.core.LetBinding(hydra.core.Name("foo"), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))), None)]), hydra.core.TermVariable(hydra.core.Name("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("List terms", None, tuple([
      hydra.testing.TestGroup("List of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralString("bar"))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))))), None, tuple([]))])),
      hydra.testing.TestGroup("List of lists of strings", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([
          hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])),
          hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))))), None, tuple([]))])),
      hydra.testing.TestGroup("List containing an empty list", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermList(tuple([hydra.core.TermList(tuple([]))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Lambda producing a list of integers", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)))))))), None, tuple([]))])),
      hydra.testing.TestGroup("List with bound variables", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("x"), None, hydra.core.TermList(tuple([
          hydra.core.TermVariable(hydra.core.Name("x")),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermVariable(hydra.core.Name("x"))]))))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Primitive terms", None, tuple([
      hydra.testing.TestGroup("Monomorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.sub"))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32)), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polymorphic primitive functions", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("els"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermVariable(hydra.core.Name("els"))))))))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeFunction(hydra.core.FunctionType(hydra.core.TypeList(hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))), hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Product terms", None, tuple([
      hydra.testing.TestGroup("Empty product", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Non-empty monotyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeInteger(hydra.core.IntegerType.INT32))]))))), None, tuple([])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermLiteral(hydra.core.LiteralString("foo")),
          hydra.core.TermList(tuple([
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(42.0))),
            hydra.core.TermLiteral(hydra.core.LiteralFloat(hydra.core.FloatValueFloat32(137.0)))]))])), hydra.core.TypeScheme(tuple([]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeList(hydra.core.TypeLiteral(hydra.core.LiteralTypeFloat(hydra.core.FloatType.FLOAT32)))]))))), None, tuple([]))])),
      hydra.testing.TestGroup("Polytyped products", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermProduct(tuple([
          hydra.core.TermList(tuple([])),
          hydra.core.TermLiteral(hydra.core.LiteralString("foo"))])), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeProduct(tuple([
          hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0"))),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([]))]))]), tuple([])),
    hydra.testing.TestGroup("Sum terms", None, tuple([
      hydra.testing.TestGroup("Singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([]), hydra.core.TypeSum(tuple([hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 1, hydra.core.TermList(tuple([])))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([hydra.core.TypeList(hydra.core.TypeVariable(hydra.core.Name("t0")))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))])),
      hydra.testing.TestGroup("Non-singleton sum terms", None, tuple([]), tuple([
        hydra.testing.TestCaseWithMetadata("#1", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(0, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None)),
          hydra.core.TypeVariable(hydra.core.Name("t0"))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")])),
        hydra.testing.TestCaseWithMetadata("#2", hydra.testing.TestCaseInference(hydra.testing.InferenceTestCase(hydra.core.TermSum(hydra.core.Sum(1, 2, hydra.core.TermLiteral(hydra.core.LiteralString("foo")))), hydra.core.TypeScheme(tuple([hydra.core.Name("t0")]), hydra.core.TypeSum(tuple([
          hydra.core.TypeVariable(hydra.core.Name("t0")),
          hydra.core.TypeLiteral(hydra.core.LiteralTypeString(None))]))))), None, tuple([hydra.testing.Tag("disabledForMinimalInference")]))]))]), tuple([]))]), tuple([]))]), tuple([]))

list_primitive_tests = hydra.testing.TestGroup("hydra.lib.lists primitives", None, tuple([
  hydra.testing.TestGroup("apply", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("string transformations", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.apply"))), hydra.core.TermList(tuple([
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))),
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower")))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("One")),
      hydra.core.TermLiteral(hydra.core.LiteralString("Two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("Three"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("ONE")),
      hydra.core.TermLiteral(hydra.core.LiteralString("TWO")),
      hydra.core.TermLiteral(hydra.core.LiteralString("THREE")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty function list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.apply"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty input list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.apply"))), hydra.core.TermList(tuple([
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper")))])))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single function", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.apply"))), hydra.core.TermList(tuple([
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper")))])))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("HELLO"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single input", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.apply"))), hydra.core.TermList(tuple([
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))),
      hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower")))])))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("Test"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("TEST")),
      hydra.core.TermLiteral(hydra.core.LiteralString("test"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("at", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("first element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.at"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("middle element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.at"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("last element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.at"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.at"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list access", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.at"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("world")))), None, tuple([]))])),
  hydra.testing.TestGroup("bind", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("negation function", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.bind"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("arg_"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("arg_"))))))))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-4)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.bind"))), hydra.core.TermList(tuple([])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("arg_"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("arg_"))))))))))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.bind"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("arg_"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("arg_"))))))))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-5)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("duplicate elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.bind"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermFunction(hydra.core.FunctionLambda(hydra.core.Lambda(hydra.core.Name("arg_"), None, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))), hydra.core.TermVariable(hydra.core.Name("arg_"))))))))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-2)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("concat", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("multiple non-empty lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty lists included", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all empty lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([])),
      hydra.core.TermList(tuple([])),
      hydra.core.TermList(tuple([]))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list of lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([]))])),
  hydra.testing.TestGroup("concat2", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("two non-empty lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat2"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("first list empty", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat2"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("second list empty", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat2"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("both lists empty", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat2"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat2"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.concat2"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("c")),
      hydra.core.TermLiteral(hydra.core.LiteralString("d"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c")),
      hydra.core.TermLiteral(hydra.core.LiteralString("d"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("cons", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("cons to non-empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("cons to empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("cons negative number", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("cons string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.cons"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("drop", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("drop from beginning", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.drop"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("drop zero elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.drop"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("drop all elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.drop"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("drop more than length", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.drop"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("drop from empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.drop"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("drop negative amount", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.drop"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("elem", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("element present", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("element not present", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element present", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element not present", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("duplicate elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string element present", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("world")),
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("test"))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string element not present", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.elem"))), hydra.core.TermLiteral(hydra.core.LiteralString("missing")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("world")),
      hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([]))])),
  hydra.testing.TestGroup("group", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("consecutive duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.group"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("no duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.group"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all same", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.group"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.group"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.group"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))]))])))), None, tuple([]))])),
  hydra.testing.TestGroup("head", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("three element list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("negative numbers", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.head"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), None, tuple([]))])),
  hydra.testing.TestGroup("init", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("multiple elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.init"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("two elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.init"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.init"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.init"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("intercalate", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("double zero separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(99)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(99))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(99))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list of lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("lists with empty lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intercalate"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])),
      hydra.core.TermList(tuple([]))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("intersperse", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("string interspersion", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intersperse"))), hydra.core.TermLiteral(hydra.core.LiteralString("and")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("and")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("and")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intersperse"))), hydra.core.TermLiteral(hydra.core.LiteralString("x")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("only"))])))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("only"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intersperse"))), hydra.core.TermLiteral(hydra.core.LiteralString("x")))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("two elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intersperse"))), hydra.core.TermLiteral(hydra.core.LiteralString("+")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("+")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("number interspersion", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.intersperse"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("last", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("three element list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.last"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.last"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("negative numbers", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.last"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.last"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("world")))), None, tuple([]))])),
  hydra.testing.TestGroup("length", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("three elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("many elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(7))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(8))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(9))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(10)))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(10))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.length"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([]))])),
  hydra.testing.TestGroup("map", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("string to uppercase", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.map"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("ONE")),
      hydra.core.TermLiteral(hydra.core.LiteralString("TWO"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.map"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.map"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("HELLO"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("number negation", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.map"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.math.neg"))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("identity function", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.map"))), hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.equality.identity"))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("nub", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("remove duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.nub"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("no duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.nub"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.nub"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.nub"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.nub"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.nub"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("null", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("empty int list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.null"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.null"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("multiple elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.null"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.null"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("non-empty string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.null"))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("a"))])))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([]))])),
  hydra.testing.TestGroup("pure", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("string element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermLiteral(hydra.core.LiteralString("one")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("one"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("number element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("negative number", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.pure"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-5))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-5)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("replicate", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("replicate three times", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.replicate"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("replicate zero times", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.replicate"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("replicate once", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.replicate"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(99))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(99)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("replicate string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.replicate"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("reverse", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("multiple elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.reverse"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.reverse"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.reverse"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("two elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.reverse"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.reverse"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("c")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("safeHead", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("non-empty int list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.safeHead"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty int list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.safeHead"))), hydra.core.TermList(tuple([])))), hydra.core.TermOptional(None))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.safeHead"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("non-empty string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.safeHead"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermOptional(hydra.core.TermLiteral(hydra.core.LiteralString("hello"))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.safeHead"))), hydra.core.TermList(tuple([])))), hydra.core.TermOptional(None))), None, tuple([]))])),
  hydra.testing.TestGroup("singleton", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("number element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.singleton"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(42)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("negative number", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.singleton"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("zero", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.singleton"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.singleton"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("sort", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("unsorted numbers", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("already sorted", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("reverse sorted", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("duplicates", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string sort", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.sort"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("zebra")),
      hydra.core.TermLiteral(hydra.core.LiteralString("apple")),
      hydra.core.TermLiteral(hydra.core.LiteralString("banana"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("apple")),
      hydra.core.TermLiteral(hydra.core.LiteralString("banana")),
      hydra.core.TermLiteral(hydra.core.LiteralString("zebra"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("tail", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("multiple elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("two elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single element", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.tail"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("take", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("take from beginning", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.take"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("take zero elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.take"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("take all elements", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.take"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("take more than length", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.take"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("take from empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.take"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("take negative amount", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.take"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(-1))))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([])))), None, tuple([]))])),
  hydra.testing.TestGroup("transpose", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("square matrix", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.transpose"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6)))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.transpose"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single row", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.transpose"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single column", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.transpose"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("ragged matrix", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.transpose"))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6)))]))])))), hydra.core.TermList(tuple([
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5)))])),
      hydra.core.TermList(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(6)))]))])))), None, tuple([]))])),
  hydra.testing.TestGroup("zip", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("equal length lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.zip"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermList(tuple([
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralString("a"))])),
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralString("b"))])),
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))),
        hydra.core.TermLiteral(hydra.core.LiteralString("c"))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("first list shorter", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.zip"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermList(tuple([
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralString("a"))])),
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralString("b"))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("second list shorter", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.zip"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3)))])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), hydra.core.TermList(tuple([
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
        hydra.core.TermLiteral(hydra.core.LiteralString("a"))])),
      hydra.core.TermProduct(tuple([
        hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))),
        hydra.core.TermLiteral(hydra.core.LiteralString("b"))]))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty first list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.zip"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty second list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.zip"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2)))])))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("both empty lists", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.lists.zip"))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), hydra.core.TermList(tuple([])))), None, tuple([]))]))]), tuple([]))

primitive_tests = hydra.testing.TestGroup("Primitive functions", "Test cases for primitive functions", tuple(["list_primitive_tests", "string_primitive_tests"]), tuple([]))

string_primitive_tests = hydra.testing.TestGroup("hydra.lib.strings primitives", None, tuple([
  hydra.testing.TestGroup("cat", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("basic concatenation", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("onetwothree")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with empty strings", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), hydra.core.TermLiteral(hydra.core.LiteralString("one")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("many empty strings", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode strings", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("ñ")),
      hydra.core.TermLiteral(hydra.core.LiteralString("世")),
      hydra.core.TermLiteral(hydra.core.LiteralString("🌍"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ世🌍")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("\n")),
      hydra.core.TermLiteral(hydra.core.LiteralString("\t")),
      hydra.core.TermLiteral(hydra.core.LiteralString("\r"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numbers as strings", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("1")),
      hydra.core.TermLiteral(hydra.core.LiteralString("2")),
      hydra.core.TermLiteral(hydra.core.LiteralString("3"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("123")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString(" ")),
      hydra.core.TermLiteral(hydra.core.LiteralString(" ")),
      hydra.core.TermLiteral(hydra.core.LiteralString(" "))])))), hydra.core.TermLiteral(hydra.core.LiteralString("   ")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("mixed content", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("Hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString(" ")),
      hydra.core.TermLiteral(hydra.core.LiteralString("World")),
      hydra.core.TermLiteral(hydra.core.LiteralString("!"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("Hello World!")))), None, tuple([]))])),
  hydra.testing.TestGroup("cat2", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("basic concatenation", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralString("world")))), hydra.core.TermLiteral(hydra.core.LiteralString("helloworld")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty first string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("world")))), hydra.core.TermLiteral(hydra.core.LiteralString("world")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty second string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("both empty strings", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello ")))), hydra.core.TermLiteral(hydra.core.LiteralString("world")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello world")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ")))), hydra.core.TermLiteral(hydra.core.LiteralString("世")))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ世")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numeric strings", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("123")))), hydra.core.TermLiteral(hydra.core.LiteralString("456")))), hydra.core.TermLiteral(hydra.core.LiteralString("123456")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.cat2"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n")))), hydra.core.TermLiteral(hydra.core.LiteralString("\t")))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t")))), None, tuple([]))])),
  hydra.testing.TestGroup("charAt", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("first character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(104))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("middle character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(2))))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(108))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("last character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(4))))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(111))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single character string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(97))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(241))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("space character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(32))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("newline character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralString("\n")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(10))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("tab character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.charAt"))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), hydra.core.TermLiteral(hydra.core.LiteralString("\t")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(9))))), None, tuple([]))])),
  hydra.testing.TestGroup("fromList", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("basic ascii string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(104))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(101))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(108))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(108))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(111)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty code point list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(97)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(104))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(32))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(105)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("h i")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(241))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(19990))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(127757)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ世🌍")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numeric characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(49))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(50))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(51)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("123")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.fromList"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(10))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(9))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(13)))])))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), None, tuple([]))])),
  hydra.testing.TestGroup("intercalate", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("comma separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString(",")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("one,two,three")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("space separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello world")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("abc")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("multi-character separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString(" | ")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("A")),
      hydra.core.TermLiteral(hydra.core.LiteralString("B")),
      hydra.core.TermLiteral(hydra.core.LiteralString("C"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("A | B | C")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString(",")))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single item list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString(",")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("only"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("only")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty strings in list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString(",")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), hydra.core.TermLiteral(hydra.core.LiteralString(",a,")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.intercalate"))), hydra.core.TermLiteral(hydra.core.LiteralString("🔗")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("link1")),
      hydra.core.TermLiteral(hydra.core.LiteralString("link2"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("link1🔗link2")))), None, tuple([]))])),
  hydra.testing.TestGroup("length", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(0))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(1))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("basic word", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("one")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("string with spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello world")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(11))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ世🌍")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(3))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numeric string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("12345")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(5))))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("long string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.length"))), hydra.core.TermLiteral(hydra.core.LiteralString("this is a longer string for testing")))), hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(35))))), None, tuple([]))])),
  hydra.testing.TestGroup("lines", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("single line", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello world")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello world"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("two lines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello\nworld")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("three lines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("one\ntwo\nthree")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("just newline", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("trailing newline", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello\n")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("leading newline", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("\nhello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("multiple consecutive newlines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.lines"))), hydra.core.TermLiteral(hydra.core.LiteralString("a\n\nb")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("null", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(True)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("space only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("basic word", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("newline only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("tab only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.null"))), hydra.core.TermLiteral(hydra.core.LiteralString("\t")))), hydra.core.TermLiteral(hydra.core.LiteralBoolean(False)))), None, tuple([]))])),
  hydra.testing.TestGroup("splitOn", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("double s in Mississippi", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("ss")))), hydra.core.TermLiteral(hydra.core.LiteralString("Mississippi")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("Mi")),
      hydra.core.TermLiteral(hydra.core.LiteralString("i")),
      hydra.core.TermLiteral(hydra.core.LiteralString("ippi"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("whole string as separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("Mississippi")))), hydra.core.TermLiteral(hydra.core.LiteralString("Mississippi")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("space separated words", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralString("one two three")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("leading and trailing spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralString(" one two three ")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("multiple consecutive spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString(" ")))), hydra.core.TermLiteral(hydra.core.LiteralString("  one two three")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("double space separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("  ")))), hydra.core.TermLiteral(hydra.core.LiteralString("  one two three")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("one two three"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("overlapping pattern aa in aaa", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("aa")))), hydra.core.TermLiteral(hydra.core.LiteralString("aaa")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("separator on empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty separator on abc", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("abc")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("a")),
      hydra.core.TermLiteral(hydra.core.LiteralString("b")),
      hydra.core.TermLiteral(hydra.core.LiteralString("c"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("both separator and string empty", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("separator not found", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("x")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("separator at start", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("h")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("ello"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("separator at end", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("o")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hell")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("multiple same separators", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("l")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("he")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("o"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single character string and separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("世")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello世world世!")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world")),
      hydra.core.TermLiteral(hydra.core.LiteralString("!"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("multi-character separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("ab")))), hydra.core.TermLiteral(hydra.core.LiteralString("cabbage")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("c")),
      hydra.core.TermLiteral(hydra.core.LiteralString("bage"))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("newline separator", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.splitOn"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n")))), hydra.core.TermLiteral(hydra.core.LiteralString("line1\nline2\nline3")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("line1")),
      hydra.core.TermLiteral(hydra.core.LiteralString("line2")),
      hydra.core.TermLiteral(hydra.core.LiteralString("line3"))])))), None, tuple([]))])),
  hydra.testing.TestGroup("toList", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermList(tuple([])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single character", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(97)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("basic word", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(104))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(101))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(108))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(108))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(111)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with space", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("h i")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(104))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(32))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(105)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("ñ世🌍")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(241))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(19990))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(127757)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numeric string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("123")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(49))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(50))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(51)))])))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toList"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(10))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(9))),
      hydra.core.TermLiteral(hydra.core.LiteralInteger(hydra.core.IntegerValueInt32(13)))])))), None, tuple([]))])),
  hydra.testing.TestGroup("toLower", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("mixed case sentence", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("One TWO threE")))), hydra.core.TermLiteral(hydra.core.LiteralString("one two three")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("alphanumeric mixed case", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("Abc123")))), hydra.core.TermLiteral(hydra.core.LiteralString("abc123")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all uppercase", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("HELLO")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all lowercase", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single uppercase char", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("A")))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single lowercase char", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("Hello World")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello world")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with punctuation", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("Hello, World!")))), hydra.core.TermLiteral(hydra.core.LiteralString("hello, world!")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode accented chars", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("ÑÁÉÍÓÚ")))), hydra.core.TermLiteral(hydra.core.LiteralString("ñáéíóú")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numbers only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("12345")))), hydra.core.TermLiteral(hydra.core.LiteralString("12345")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toLower"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), None, tuple([]))])),
  hydra.testing.TestGroup("toUpper", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("mixed case sentence", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("One TWO threE")))), hydra.core.TermLiteral(hydra.core.LiteralString("ONE TWO THREE")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("alphanumeric mixed case", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("Abc123")))), hydra.core.TermLiteral(hydra.core.LiteralString("ABC123")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all lowercase", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello")))), hydra.core.TermLiteral(hydra.core.LiteralString("HELLO")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all uppercase", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("HELLO")))), hydra.core.TermLiteral(hydra.core.LiteralString("HELLO")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty string", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single lowercase char", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("a")))), hydra.core.TermLiteral(hydra.core.LiteralString("A")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single uppercase char", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("A")))), hydra.core.TermLiteral(hydra.core.LiteralString("A")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with spaces", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello world")))), hydra.core.TermLiteral(hydra.core.LiteralString("HELLO WORLD")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with punctuation", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("hello, world!")))), hydra.core.TermLiteral(hydra.core.LiteralString("HELLO, WORLD!")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode accented chars", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("ñáéíóú")))), hydra.core.TermLiteral(hydra.core.LiteralString("ÑÁÉÍÓÚ")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("numbers only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("12345")))), hydra.core.TermLiteral(hydra.core.LiteralString("12345")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("special characters only", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.toUpper"))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\t\r")))), None, tuple([]))])),
  hydra.testing.TestGroup("unlines", None, tuple([]), tuple([
    hydra.testing.TestCaseWithMetadata("basic two lines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello\nworld\n")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("single line", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([hydra.core.TermLiteral(hydra.core.LiteralString("hello"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello\n")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("empty list", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([])))), hydra.core.TermLiteral(hydra.core.LiteralString("")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("three lines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("one")),
      hydra.core.TermLiteral(hydra.core.LiteralString("two")),
      hydra.core.TermLiteral(hydra.core.LiteralString("three"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("one\ntwo\nthree\n")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("with empty lines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("hello")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("world"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("hello\n\nworld\n")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("all empty lines", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString("")),
      hydra.core.TermLiteral(hydra.core.LiteralString(""))])))), hydra.core.TermLiteral(hydra.core.LiteralString("\n\n\n")))), None, tuple([])),
    hydra.testing.TestCaseWithMetadata("unicode content", hydra.testing.TestCaseEvaluation(hydra.testing.EvaluationTestCase(hydra.testing.EvaluationStyle.EAGER, hydra.core.TermApplication(hydra.core.Application(hydra.core.TermFunction(hydra.core.FunctionPrimitive(hydra.core.Name("hydra.lib.strings.unlines"))), hydra.core.TermList(tuple([
      hydra.core.TermLiteral(hydra.core.LiteralString("ñoño")),
      hydra.core.TermLiteral(hydra.core.LiteralString("世界"))])))), hydra.core.TermLiteral(hydra.core.LiteralString("ñoño\n世界\n")))), None, tuple([]))]))]), tuple([]))
